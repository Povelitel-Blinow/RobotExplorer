//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Robot"",
            ""id"": ""5749e491-2010-42a1-9886-a7cbce4ee6b9"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""37c2f582-4480-4f69-aec0-c0d6f2c89fd6"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""7fd4b78f-af68-4c63-b364-a9b6b96d4889"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Compress"",
                    ""type"": ""Button"",
                    ""id"": ""f736118f-c82b-4edb-b9ce-3d2bd0d2d9a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeLeadingBody"",
                    ""type"": ""Button"",
                    ""id"": ""d158a8ee-2c04-43d8-8a80-ca4c658c2092"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mine"",
                    ""type"": ""Button"",
                    ""id"": ""2eb50c44-4024-4e1b-a20f-0d6a9531b4c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""fa0a7ae2-65ed-49ad-a398-f0cc9c01ddf7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""f9faa1e2-5bf9-4efa-95b4-00f52901e5ce"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e911171f-27b3-48b3-aa2f-4214d0232bc8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""f5c077f3-335e-468d-bb57-58db8b7276e0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2de76afb-01b0-4608-a393-4baa2710bef9"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1d10b06d-63e9-4a85-8e10-2b5a6694aa11"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""3226b320-fd7c-44e5-b28c-a84d001dcc16"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Compress"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""80276492-cc80-43b5-98e3-f86151c7913c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Compress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e501741b-58db-4ed3-9fba-1c61c29ea0c0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Compress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""faeab190-a589-4073-8939-723fadc6e2eb"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeLeadingBody"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""132175b0-f1a0-42c8-a098-c9143d8b2fdc"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Robot
        m_Robot = asset.FindActionMap("Robot", throwIfNotFound: true);
        m_Robot_Move = m_Robot.FindAction("Move", throwIfNotFound: true);
        m_Robot_Rotate = m_Robot.FindAction("Rotate", throwIfNotFound: true);
        m_Robot_Compress = m_Robot.FindAction("Compress", throwIfNotFound: true);
        m_Robot_ChangeLeadingBody = m_Robot.FindAction("ChangeLeadingBody", throwIfNotFound: true);
        m_Robot_Mine = m_Robot.FindAction("Mine", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Robot
    private readonly InputActionMap m_Robot;
    private IRobotActions m_RobotActionsCallbackInterface;
    private readonly InputAction m_Robot_Move;
    private readonly InputAction m_Robot_Rotate;
    private readonly InputAction m_Robot_Compress;
    private readonly InputAction m_Robot_ChangeLeadingBody;
    private readonly InputAction m_Robot_Mine;
    public struct RobotActions
    {
        private @PlayerInput m_Wrapper;
        public RobotActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Robot_Move;
        public InputAction @Rotate => m_Wrapper.m_Robot_Rotate;
        public InputAction @Compress => m_Wrapper.m_Robot_Compress;
        public InputAction @ChangeLeadingBody => m_Wrapper.m_Robot_ChangeLeadingBody;
        public InputAction @Mine => m_Wrapper.m_Robot_Mine;
        public InputActionMap Get() { return m_Wrapper.m_Robot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RobotActions set) { return set.Get(); }
        public void SetCallbacks(IRobotActions instance)
        {
            if (m_Wrapper.m_RobotActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_RobotActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_RobotActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_RobotActionsCallbackInterface.OnMove;
                @Rotate.started -= m_Wrapper.m_RobotActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_RobotActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_RobotActionsCallbackInterface.OnRotate;
                @Compress.started -= m_Wrapper.m_RobotActionsCallbackInterface.OnCompress;
                @Compress.performed -= m_Wrapper.m_RobotActionsCallbackInterface.OnCompress;
                @Compress.canceled -= m_Wrapper.m_RobotActionsCallbackInterface.OnCompress;
                @ChangeLeadingBody.started -= m_Wrapper.m_RobotActionsCallbackInterface.OnChangeLeadingBody;
                @ChangeLeadingBody.performed -= m_Wrapper.m_RobotActionsCallbackInterface.OnChangeLeadingBody;
                @ChangeLeadingBody.canceled -= m_Wrapper.m_RobotActionsCallbackInterface.OnChangeLeadingBody;
                @Mine.started -= m_Wrapper.m_RobotActionsCallbackInterface.OnMine;
                @Mine.performed -= m_Wrapper.m_RobotActionsCallbackInterface.OnMine;
                @Mine.canceled -= m_Wrapper.m_RobotActionsCallbackInterface.OnMine;
            }
            m_Wrapper.m_RobotActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Compress.started += instance.OnCompress;
                @Compress.performed += instance.OnCompress;
                @Compress.canceled += instance.OnCompress;
                @ChangeLeadingBody.started += instance.OnChangeLeadingBody;
                @ChangeLeadingBody.performed += instance.OnChangeLeadingBody;
                @ChangeLeadingBody.canceled += instance.OnChangeLeadingBody;
                @Mine.started += instance.OnMine;
                @Mine.performed += instance.OnMine;
                @Mine.canceled += instance.OnMine;
            }
        }
    }
    public RobotActions @Robot => new RobotActions(this);
    public interface IRobotActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnCompress(InputAction.CallbackContext context);
        void OnChangeLeadingBody(InputAction.CallbackContext context);
        void OnMine(InputAction.CallbackContext context);
    }
}
